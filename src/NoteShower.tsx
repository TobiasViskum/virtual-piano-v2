import { Event, listen } from "@tauri-apps/api/event";
import { useEffect, useRef, useState } from "react";
import "./reset.css";
import "./utils.css";
import "./NoteShower.css";
import { getNoteName, isBlackKey } from "./state";

export function NoteShower() {
  const [playedNotes, setPlayedNotes] = useState<number[]>([]);
  const playedNotesRef = useRef<Set<number>>(new Set());

  const noteAbsDistance = 26;

  const topTrebleF = 77;
  const bottomTrebleF = 64;

  const topBassF = 57;
  const bottomBassF = 43;

  useEffect(() => {
    listen(
      "piano_event",
      (
        e: Event<{
          channel: number;
          event_type: {
            Note: [number, number, number];
          };
        }>
      ) => {
        console.log(e.payload.event_type.Note[1]);

        if (e.payload.event_type.Note[0] === 144) {
          playedNotesRef.current.add(e.payload.event_type.Note[1]);
        } else if (e.payload.event_type.Note[0] === 128) {
          playedNotesRef.current.delete(e.payload.event_type.Note[1]);
        }

        setPlayedNotes(Array.from(playedNotesRef.current));
      }
    );
  }, []);

  return (
    <main>
      <div className="piano-notes-in-clef">
        <h2>Notes in treble:</h2>
        <div className="piano-stave treble-clef">
          <TrebleClef />
          <div>
            <div className="stave-notes-container">
              {playedNotes.map((note) => {
                if (note < 52) {
                  return null;
                }
                let steps = 0;
                let isBb = false;

                if (note > topTrebleF) {
                  for (let i = topTrebleF + 1; i <= note; i++) {
                    if (!isBlackKey(i)) {
                      steps--;
                      isBb = false;
                    } else {
                      isBb = true;
                    }
                  }
                } else {
                  for (let i = topTrebleF - 1; i >= note; i--) {
                    if (!isBlackKey(i)) {
                      steps++;
                      isBb = false;
                    } else {
                      isBb = true;
                    }
                  }
                }

                console.log(steps);

                let noteClass = "note";
                if (note < bottomTrebleF - 2 || note > topTrebleF) {
                  if (steps % 2 === 0) {
                    noteClass = "note with-line-center";
                  } else {
                    noteClass = "note with-line-above";
                  }
                }

                return (
                  <div
                    className={noteClass}
                    style={{
                      top: `${noteAbsDistance * 0.5 * steps - noteAbsDistance * 0.5}px`,
                    }}
                    key={note}
                  >
                    {getNoteName(note)}
                  </div>
                );
              })}
            </div>
            <div className="stave-line" />
            <div className="stave-line" />
            <div className="stave-line" />
            <div className="stave-line" />
            <div className="stave-line" />
          </div>
        </div>
      </div>

      <div className="piano-notes-in-clef">
        <h2>Notes in bass:</h2>
        <div className="piano-stave bass-clef">
          <BassClef />
          <div>
            <div className="stave-notes-container">
              {playedNotes.map((note) => {
                if (note > 71) {
                  return null;
                }
                let steps = 0;
                let isBb = false;

                if (note > topBassF) {
                  for (let i = topBassF + 1; i <= note; i++) {
                    if (!isBlackKey(i)) {
                      steps--;
                      isBb = false;
                    } else {
                      isBb = true;
                    }
                  }
                } else {
                  for (let i = topBassF - 1; i >= note; i--) {
                    if (!isBlackKey(i)) {
                      steps++;
                      isBb = false;
                    } else {
                      isBb = true;
                    }
                  }
                }

                console.log(steps);

                let noteClass = "note";
                if (note < bottomBassF - 2 || note > topBassF) {
                  if (steps % 2 === 0) {
                    noteClass = "note with-line-center";
                  } else {
                    noteClass = "note with-line-above";
                  }
                }

                return (
                  <div
                    className={noteClass}
                    style={{
                      top: `${noteAbsDistance * 0.5 * steps - noteAbsDistance * 0.5}px`,
                    }}
                    key={note}
                  >
                    {getNoteName(note)}
                  </div>
                );
              })}
            </div>
            <div className="stave-line" />
            <div className="stave-line" />
            <div className="stave-line" />
            <div className="stave-line" />
            <div className="stave-line" />
          </div>
        </div>
      </div>
    </main>
  );
}

function TrebleClef() {
  return (
    <svg className="treble-clef">
      <g>
        <path
          strokeWidth="0.3"
          strokeDasharray="none"
          fill="black"
          stroke="none"
          d="M28.711104 65.844288C28.660416 65.41344,28.711104 65.388096,28.9392 65.16C32.892864 61.485119999999995,35.883456 56.847167999999996,35.883456 51.246144C35.883456 48.078143999999995,34.996415999999996 44.935488,33.50112 42.755903999999994C32.943552 41.944896,32.005824000000004 40.931135999999995,31.60032 40.931135999999995C31.09344 40.931135999999995,29.95296 41.868863999999995,29.243328 42.679871999999996C26.53152 45.670463999999996,25.64448 50.232383999999996,25.64448 54.033984C25.64448 56.137536,25.923264000000003 58.519872,26.176704 60.015168C26.252736 60.446016,26.278080000000003 60.522048,25.847231999999998 60.902208C20.57568 65.236032,15 70.456896,15 77.832C15 84.168,19.333824 90.199872,28.280256 90.199872C29.116608 90.199872,30.079680000000003 90.12384,30.814656 89.971776C31.194816000000003 89.89574400000001,31.270848 89.8704,31.346880000000002 90.301248C31.777728 92.759616,32.335296 95.927616,32.335296 97.651008C32.335296 103.04928000000001,28.685760000000002 103.708224,26.53152 103.708224C24.554688 103.708224,23.61696 103.12531200000001,23.61696 102.643776C23.61696 102.390336,23.946432 102.28896,24.782784 102.010176C25.923264000000003 101.680704,27.215808000000003 100.71763200000001,27.215808000000003 98.588736C27.215808000000003 96.58656,25.948608 94.863168,23.718336 94.863168C21.285312 94.863168,19.81536 96.814656,19.81536 99.070272C19.81536 101.42726400000001,21.234624 105.026112,26.759616 105.026112C29.19264 105.026112,33.931968 103.910976,33.931968 97.72704C33.931968 95.62348800000001,33.27302400000001 92.176704,32.892864 89.89574400000001C32.816832000000005 89.464896,32.842176 89.515584,33.349056000000004 89.287488C37.04928 87.817536,39.482304 84.725568,39.482304 80.594496C39.482304 75.9312,36.060864 71.800128,30.687936 71.800128C29.750208 71.800128,29.750208 71.800128,29.623488000000002 71.141184M32.157888 46.582848C33.349056000000004 46.582848,34.337472000000005 47.571264,34.337472000000005 49.57344C34.337472000000005 53.628479999999996,30.865344 56.923199999999994,28.001472 59.432255999999995C27.748032000000002 59.660352,27.595968 59.609663999999995,27.519936 59.128128C27.367872 58.1904,27.29184 56.948544,27.29184 55.78272C27.29184 50.08032,29.927616 46.582848,32.157888 46.582848M28.17888 71.445312C28.280256 72.1296,28.280256 72.10425599999999,27.621312000000003 72.307008C24.427968 73.3968,22.324416 76.286016,22.324416 79.403328C22.324416 82.672704,24.047808 85.004352,26.53152 85.866048C26.835648 85.967424,27.266496 86.0688,27.519936 86.0688C27.798720000000003 86.0688,27.950784 85.891392,27.950784 85.663296C27.950784 85.409856,27.672 85.30848,27.41856 85.207104C25.872576000000002 84.54816,24.782784 82.976832,24.782784 81.304128C24.782784 79.200576,26.202048 77.654592,28.43232 77.020992C29.015232 76.868928,29.091264000000002 76.919616,29.167296 77.32512L30.992064 88.19769600000001C31.068096 88.6032,31.017408 88.6032,30.485184000000004 88.704576C29.902272000000004 88.805952,29.167296 88.881984,28.43232 88.881984C22.045632 88.881984,17.91456 85.33382399999999,17.91456 80.265024C17.91456 78.110784,18.29472 75.221568,21.310656 71.800128C23.515584 69.367104,25.188288 67.998528,26.886336 66.629952C27.266496 66.325824,27.342528 66.37651199999999,27.41856 66.756672M30.687936 77.249088C30.611904000000003 76.792896,30.662592000000004 76.69152,31.09344 76.742208C34.058688000000004 76.995648,36.49171200000001 79.47936,36.49171200000001 82.672704C36.49171200000001 84.979008,35.097792 86.82912,33.070272 87.868224C32.639424000000005 88.070976,32.563392 88.070976,32.48736 87.640128"
        ></path>
      </g>
    </svg>
  );
}

function BassClef() {
  return (
    <svg className="bass-clef">
      <g>
        <path
          strokeWidth="0.3"
          strokeDasharray="none"
          fill="black"
          stroke="none"
          d="M23.36352 50.813919999999996C17.58048 50.813919999999996,15 55.03024,15 58.20976C15 60.85936,16.3824 63.14032,19.07808 63.14032C21.17472 63.14032,22.6032 61.6888,22.6032 59.63824C22.6032 57.51856,21.03648 56.18224,19.42368 56.18224C18.52512 56.18224,18.17952 56.412639999999996,17.7648 56.412639999999996C17.32704 56.412639999999996,17.21184 56.1592,17.21184 55.8136C17.21184 54.50032,19.21632 52.05808,22.6032 52.05808C26.10528 52.05808,27.648960000000002 55.51408,27.648960000000002 60.72112C27.648960000000002 69.9832,23.064 75.16720000000001,15.32256 79.56784C15.02304 79.72912,14.83872 79.91344000000001,14.83872 80.16688C14.83872 80.37424,14.97696 80.55856,15.27648 80.55856C15.43776 80.55856,15.62208 80.51248,15.82944 80.39728C23.985599999999998 76.41136,32.625600000000006 70.51312,32.625600000000006 60.4216C32.625600000000006 54.6616,29.10048 50.813919999999996,23.36352 50.813919999999996M35.87424 53.53264C34.83744 53.53264,34.05408 54.316,34.05408 55.3528C34.05408 56.3896,34.83744 57.17296,35.87424 57.17296C36.888000000000005 57.17296,37.6944 56.3896,37.6944 55.3528C37.6944 54.316,36.888000000000005 53.53264,35.87424 53.53264M35.89728 61.85008C34.883520000000004 61.85008,34.10016 62.6104,34.10016 63.6472C34.10016 64.684,34.883520000000004 65.44432,35.89728 65.44432C36.93408 65.44432,37.6944 64.684,37.6944 63.6472C37.6944 62.6104,36.93408 61.85008,35.89728 61.85008"
        ></path>
      </g>
    </svg>
  );
}
